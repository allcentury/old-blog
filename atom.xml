<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Anthony Ross' Blog]]></title>
  <link href="http://allcentury.github.io/atom.xml" rel="self"/>
  <link href="http://allcentury.github.io/"/>
  <updated>2014-02-28T07:23:29-05:00</updated>
  <id>http://allcentury.github.io/</id>
  <author>
    <name><![CDATA[Anthony Ross]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Pry]]></title>
    <link href="http://allcentury.github.io/blog/2014/02/27/pry/"/>
    <updated>2014-02-27T20:57:10-05:00</updated>
    <id>http://allcentury.github.io/blog/2014/02/27/pry</id>
    <content type="html"><![CDATA[<p>Launch Academy started off a bit slow this week at least for me.  Friday we received a challenge that I was able to solve by Monday morning but it wasn&rsquo;t easy.  I got very familiar with nested data structures quickly and I think after endless tinkering I got the program working.</p>

<p>That said, the rest of the class really struggled with the exercise and because of that the load was lessened for a few days.  I did have some non-core exercises I got to work on, including some additional nested/compound data structures and I got to use a lovely little gem named Sinatra.</p>

<p>However, Sinatra is not the focus of this post &ndash; my new workflow is.  In high school, I was forced to test my code with endless print statements like &ldquo;x here should be 2&rdquo;, or &ldquo;this will never get printed to the screen&rdquo; (yet it always got printed to the screen).  Enter a ruby gem called &lsquo;pry&rsquo;.  If it sounds invasive, it is!  Imagine the ability to stop your program in mid-thought and ask all the questions, you&rsquo;ve always wanted&hellip;</p>

<figure class='code'><figcaption><span>Pry</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">monthly_egg_count</span>
</span><span class='line'>  <span class="n">total</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'>  <span class="n">restaurants</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">rest</span><span class="p">,</span> <span class="n">v</span><span class="o">|</span> <span class="c1">#rest = Restaurant v = hours, meals</span>
</span><span class='line'>    <span class="n">v</span><span class="o">[</span><span class="ss">:meals</span><span class="o">].</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">sub_k</span><span class="p">,</span> <span class="n">sub_v</span><span class="o">|</span> <span class="c1">#sub_v = breakfast, lunch, dinner</span>
</span><span class='line'>      <span class="n">sub_v</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="nb">name</span><span class="p">,</span> <span class="n">value</span><span class="o">|</span>
</span><span class='line'>        <span class="nb">binding</span><span class="o">.</span><span class="n">pry</span>
</span><span class='line'>       <span class="k">if</span> <span class="n">value</span><span class="o">[</span><span class="ss">:ingredients</span><span class="o">].</span><span class="n">include?</span><span class="p">(</span><span class="s2">&quot;eggs&quot;</span><span class="p">)</span>
</span><span class='line'>        <span class="n">total</span> <span class="o">+=</span> <span class="n">v</span><span class="o">[</span><span class="ss">:hours</span><span class="o">]</span> <span class="o">*</span> <span class="mi">8</span> <span class="o">*</span> <span class="mi">2</span> <span class="o">*</span> <span class="mi">30</span>
</span><span class='line'>       <span class="k">end</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>  <span class="n">total</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>This method above iterates over a nested hash and checks if the ingredients on a menu includes eggs.  That part isn&rsquo;t really important, it&rsquo;s the magic of line 21.  When the program runs, it will stop dead in it&rsquo;s tracks (though not error) at line 21.  I can then ask the program what the value of every variable is above line 21.  Can I possibly remember what all of those are, at each instance?  No way, I&rsquo;m just a simpleton.  With pry though, I can easily validate my results and even more importantly find the problematic lines with ease.  My favorite part about pry though is being able to type &ldquo;next&rdquo; and/or &ldquo;continue&rdquo; to walk through the program, line by line (still amazed by this).  If I had a tool like this in high school I think things would have ended up a lot differently for me&hellip;</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[RegEx]]></title>
    <link href="http://allcentury.github.io/blog/2014/02/25/regex/"/>
    <updated>2014-02-25T11:51:16-05:00</updated>
    <id>http://allcentury.github.io/blog/2014/02/25/regex</id>
    <content type="html"><![CDATA[<p>I think about all the tens of thousands(more?) of online forms I&rsquo;ve filled in over the years.  I&rsquo;d like to think myself or my Chrome auto-fill has done fairly good work.  However, after spending the last 24hrs on RegEx I&rsquo;m certain that I got so good at entering forms because of how good the validation was on all the sites I&rsquo;ve been using.</p>

<p>The web has been training me to enter in forms as they expect, phone numbers with or without dashes or passwords that contain a certain amount of some characters, some digits, some capital, etc.  Prior to learning RegEx I really had no clue how all of those validations were done without a lot of code and while I appreciate the amount of code it actually takes to validate input, it sure is hard to read!</p>

<p>It might almost be pass√© to complain about RegEx as of 2014 but I found a video that pretty much sums up what it&rsquo;s like to try and refine your projects to have less code:</p>

<iframe width="560" height="315" src="http://allcentury.github.io//www.youtube.com/embed/Om11M9LYJak" frameborder="0" allowfullscreen></iframe>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Week 1 Reflection]]></title>
    <link href="http://allcentury.github.io/blog/2014/02/22/week-1-reflection/"/>
    <updated>2014-02-22T10:54:18-05:00</updated>
    <id>http://allcentury.github.io/blog/2014/02/22/week-1-reflection</id>
    <content type="html"><![CDATA[<p>Week 1 is a wrap!  While I spent most of the time &ldquo;in the weeds&rdquo; I tried my best to reflect on each day as it went.  Sometimes it&rsquo;s easy to put into words what I learned that day, other times it&rsquo;s a bit more abstract.</p>

<p>The most valuable tool I learned this week was in regards to workflow.  Specifically, I think pair programming is fantastic!
So many times I&rsquo;ve stared at a problem for hours which only seems to make matters worse.  However in the pair programming world, you can take a step back, let your partner drive for a bit and think about the problem at a higher level.  This was especially nice for me as I never spent white boarding problems (ever) until this week and it drastically changed my problem solving skills (for the better).</p>

<p>While I know pair programming generally consists of two people, I actually had a third in my group this week.  However, myself and Greg were at a very similar experience level but Dan wasn&rsquo;t as comfortable with ruby yet.  Greg and I would debate and debate over complex ideas but it wasn&rsquo;t until we both tried to explain our ideas to Dan that we realized we were over complicating the problem.  I mention this because pair programming doesn&rsquo;t require you pair with someone at your same level, in fact we think having Dan there forced us to explain our rationale in a very detailed way which sometimes lead us to a different approach.</p>

<p>The next big item for me was context.  You can imagine after reading 5 different books on RoR and watching countless videos on my own, that my internal dictionary of terms and their definitions were getting a bit scrambled.  Having the lectures really cemented ideas about ruby that I had previously read about.  It also allowed me to speak to my peers more explicitly which then helped me communicate my ideas regarding the problem at hand.</p>

<p>With all that said, I&rsquo;m a bit afraid my normal communication might be suffering a bit.  Last night at dinner while wearing a sweatshirt covered in reindeers, I was trying to find the word to describe said sweatshirt.  Instead though, I just started spitting out random ruby&hellip; NameError: undefined sweatshirt. Then when I wanted to ask if the dishwasher had been emptied I spewed: dishwasher.isempty?</p>

<p>&hellip; crickets &hellip;</p>

<p>&ldquo;Are you looking for the word festive?&rdquo;, she said.  YES!</p>

<p>sweatshirt.festive?</p>

<p>That <em>should</em> certainly return true&hellip;</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hiring Partners Day 1]]></title>
    <link href="http://allcentury.github.io/blog/2014/02/20/hiring-partners-day-1/"/>
    <updated>2014-02-20T19:01:03-05:00</updated>
    <id>http://allcentury.github.io/blog/2014/02/20/hiring-partners-day-1</id>
    <content type="html"><![CDATA[<p>Today was a fun day at Launch Academy &ndash; not only did we really dive into methods but we had a great Q&amp;A section with a few of the hiring partners.</p>

<p><a href="http://www.linkedin.com/in/tonywieczorek">Tony Wieczorek of Firecracker</a> instantly became a voice of reason in a discussion about jobs and work environments.  While most of the facilitation was in regards to what we will be asked in an interview, he answered my question of &ldquo;What can we ask in an interview?&rdquo; with the most sincerity.  While I understand, hiring is a partnership, the landscape of start-ups seems so vast that landing at the right company is important to me.  What I mean by that, is I am currently going through a very intense program, one that continues to build on itself (Anthony += Anthony).  I&rsquo;d love for this learning to continue at this pace, regardless of where I go and I want a corporate culture that reflects that.  When Tony said I should ask to meet a team (if it&rsquo;s smaller) and get a tour of the facilities a light bulb went off!</p>

<p><a href="http://www.linkedin.com/pub/catherine-powell/0/691/b92">Katherin Powell of Groupize</a> was next and the jokes started early!  Overly sarcastic, very intelligent but also humble!  She gave some great insight into what it&rsquo;s like working at a tech-start up, what non-technical founders roles are but what a Jr. Developer might be walking into.  She also answered my question about corporate culture and said that I should really ask these questions at the interview, I should be able to tell early on what it might be like.</p>

<p><a href="www.linkedin.com/in/zachjyoung">Zach of Gameface Media</a> was a former cohorter from LA and was very excited for all of us in this Spring Cohort.  He had some great advice about not giving up, continuing to grow as developers and to also network outside of the tech industry.  Emphasizing to really use our own interests to help guide us to an area we&rsquo;d love to work in.  Brilliant!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Koans]]></title>
    <link href="http://allcentury.github.io/blog/2014/02/20/koans/"/>
    <updated>2014-02-20T07:02:45-05:00</updated>
    <id>http://allcentury.github.io/blog/2014/02/20/koans</id>
    <content type="html"><![CDATA[<p>I&rsquo;ve been working through the Koans exercises in my free time (hah?) and have learned some things about the ruby language I never knew before.  For instance, if you have the following block of code:</p>

<figure class='code'><figcaption><span>Sandwich_Array</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">array</span> <span class="o">=</span> <span class="o">[</span><span class="ss">:peanut</span><span class="p">,</span> <span class="ss">:butter</span><span class="p">,</span> <span class="ss">:and</span><span class="p">,</span> <span class="ss">:jelly</span><span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>If you then run array[4,0] in IRB or Pry, you get a blank array (shown as &lsquo;[]&rsquo;).  However, if you run array[5,0] you actually get nil.  At first I thought I did one of these wrong but after repeating the test multiple times, this keeps returning the same result.  After some slight internet digging, it appears Ruby holds some kind of &ldquo;ghost&rdquo; boundary that is 1 + array.length.  The Ruby docs mentions it briefly by saying that it&rsquo;s a special case (<a href="http://ruby-doc.org/core-1.9.3/Array.html#method-i-slice">here</a>).  Really though, I don&rsquo;t understand what&rsquo;s happening &ndash; so digging I shall continue.</p>

<p>That said, after running through the array assignments, I&rsquo;m even more confused.  In this example:</p>

<figure class='code'><figcaption><span>Cher</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">first_name</span><span class="p">,</span> <span class="n">last_name</span> <span class="o">=</span> <span class="o">[</span><span class="s2">&quot;Cher&quot;</span><span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>Calling first_name returns us &ldquo;Cher&rdquo;, which is expected.  However based on what I outlined above, you would think last_name which is just 1 outside the boundary would product &lsquo;[]&rsquo; but it infact produces nil.  And the mystery continues&hellip;</p>

<p>Expect multiple blog posts about Koans as this is a long exercise!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Up Up and ... Crash!]]></title>
    <link href="http://allcentury.github.io/blog/2014/02/19/up-up-and-dot-dot-dot-crash/"/>
    <updated>2014-02-19T18:18:21-05:00</updated>
    <id>http://allcentury.github.io/blog/2014/02/19/up-up-and-dot-dot-dot-crash</id>
    <content type="html"><![CDATA[<p>Yesterday was a long one but thanks to my girlfriend &amp; my mom, I was able to get a good nights rest.  I woke up a bit tired today but towards the end of the day I felt great.  Class sessions are going well, some problems seem easy while others are taking me a bit more time.  Why did writing a multiplications table take me 3 separate tries and an hour?  Sometimes I think half the battle of programming is simplifying the problem before coding.  I was trying multidimensional arrays with complex iterators to try and format the output to match the test case.</p>

<p>Then a fellow student came by and said he was struggling too &ndash; after a few moments talking to each other, we got this:</p>

<figure class='code'><figcaption><span>Multiplications_Table</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">multiplication_table</span><span class="p">(</span><span class="n">size</span><span class="o">=</span><span class="mi">12</span><span class="p">)</span>
</span><span class='line'>  <span class="n">x</span> <span class="o">=</span> <span class="mi">1</span>
</span><span class='line'>  <span class="n">y</span> <span class="o">=</span> <span class="mi">1</span>
</span><span class='line'>  <span class="k">while</span> <span class="n">x</span> <span class="o">&lt;=</span> <span class="n">size</span>
</span><span class='line'>    <span class="nb">print</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="n">x</span><span class="o">*</span><span class="n">y</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'>    <span class="n">y</span> <span class="o">+=</span><span class="mi">1</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">y</span> <span class="o">&lt;=</span> <span class="n">size</span>
</span><span class='line'>      <span class="nb">print</span> <span class="s2">&quot;</span><span class="se">\t</span><span class="s2">&quot;</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">y</span> <span class="o">&gt;</span> <span class="n">size</span>
</span><span class='line'>      <span class="nb">puts</span>
</span><span class='line'>      <span class="n">x</span> <span class="o">+=</span> <span class="mi">1</span>
</span><span class='line'>      <span class="n">y</span> <span class="o">=</span> <span class="mi">1</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Well duh.  Our lead mentor (Adam) encouraged us to solve a problem known a few years back in the hiring world, a little test called FizzBuzz.  The solution is all over the internet so I won&rsquo;t post it, but shame on you if you&rsquo;re reading this looking for the answer!  I can&rsquo;t speak as to why other developers can&rsquo;t solve this problem but I&rsquo;m glad we talked about it in class.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Day 2 as a Launcher]]></title>
    <link href="http://allcentury.github.io/blog/2014/02/18/day-2-as-a-launcher/"/>
    <updated>2014-02-18T18:50:10-05:00</updated>
    <id>http://allcentury.github.io/blog/2014/02/18/day-2-as-a-launcher</id>
    <content type="html"><![CDATA[<p>These hour long train rides from Launch Academy&rsquo;s &ldquo;Mission Control&rdquo; are nice for a few things &ndash; 1.) I actually get some time to decompress from long hours of staring at manuals and online docs and 2.) I get to actually listen to some music.  Anyone who knows me knows I love music and would be completely content with just closing my eyes and listening for hours.</p>

<p>However, the nicest part about the train (besides the free-wifi &ndash; thanks MBTA) is that I actually get to review the madness that happened during the course of a day.  When you&rsquo;re &ldquo;in&rdquo; the moment, it&rsquo;s hard to step back and reflect on what you just learned.</p>

<p>Today in class we went over flow control in ruby and loops.  These topics aren&rsquo;t foreign to me as I explored them heavily many years ago in C &amp; C++.  The ruby naming conventions and block requirements are a bit different from the languages I already mentioned but I found that interesting.</p>

<p>See in other languages like C, you&rsquo;d have to explicitly define each variable and it&rsquo;s state, but in Ruby you can do this:</p>

<figure class='code'><figcaption><span>Blocks</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">array</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">x</span><span class="o">|</span>
</span><span class='line'>  <span class="nb">puts</span> <span class="n">x</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Where did I define &ldquo;x&rdquo; there?  I didn&rsquo;t.  The each method is so perfect that it doesn&rsquo;t even care that I didn&rsquo;t set the state of &ldquo;x&rdquo;.  While I had been using the each method and a while loop almost interchangeably since the fall, it wasn&rsquo;t until that I realized I can do so much more with less!  In fact, Dan Pickett &ndash; head of LA told us that Ruby&rsquo;s each method is really a fancy while loop but that I should let the language inherently simplify my code.  Brilliant!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[First Day as a Launcher]]></title>
    <link href="http://allcentury.github.io/blog/2014/02/18/first-day-as-a-launcher/"/>
    <updated>2014-02-18T08:00:52-05:00</updated>
    <id>http://allcentury.github.io/blog/2014/02/18/first-day-as-a-launcher</id>
    <content type="html"><![CDATA[<p>Yesterday was my first formal day at Launch Academy.  It was a wild experience, one that seemed a bit surreal.  After having worked at startups for sometime in a fairly non-technical role, it was great to be able to talk to other students about what technology excited them but more importantly what they actually wanted to BUILD with our new set of tools.</p>

<p>Programming up until this point has really seemed like a solo adventure other than the one-off moment where I have to &ldquo;phone a friend&rdquo; because I am hopelessly stuck on something (friends, you know who you are &ndash; thank you!).  Today at Launch Academy though, was different.  Every desk we sit at is a pair-programming station, one that encourages collaboration and communication.  I am excited to continue this journey with and without rubber ducks.</p>

<p>We met the team, all who seem very smart in their own right and eager to help.  Perhaps rather than eager to help, they are eager to challenge you and make you think about problem solving using a new paradigm.  I am under the impression these next 10 weeks will be intense.  We have a tremendous amount of independent learning responsibility outside the classroom but that seems to be where I shine.  I have an understanding of the teaching methods now, one that seems to suit me well an that is challenge-based learning.</p>

<p>Ah challenged-based learning &ndash; give me a problem, a few tools, a few concepts and I&rsquo;m off and running.  Unlike most other RoR guides and tutorials, we&rsquo;re being asked to solve most real world problems which is exactly why I came here.  I regretfully gave up programming at an earlier age because too much of what I was doing was theoretical rather than practical.  This course seems to be a bit of both, but the focus of the curriculum is real world and that excites me.  Looking forward to this week!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[My First Post!]]></title>
    <link href="http://allcentury.github.io/blog/2014/01/14/my-first-post/"/>
    <updated>2014-01-14T00:40:28-05:00</updated>
    <id>http://allcentury.github.io/blog/2014/01/14/my-first-post</id>
    <content type="html"><![CDATA[<p>Happy January 13th everyone!  I&rsquo;m really excited today as I&rsquo;ve launched this blog using some wonderful Ruby on Rails gems.  Since this is my first post, I think I should explain where I am at today but also where I&rsquo;m coming from.</p>

<p>Learning programming has been an on &amp; off again relationship &ndash; one that started when I was 13 and has continued to rear it&rsquo;s head time and time again.  This time though, as I&rsquo;m anxiously approaching the daunting year that I turn 30 &ndash; I have finally conceded to my own intuition.</p>

<p>See back in High School, I coded and I coded hard.  I had 3 machines running Linux. I wrote a script that made my mom solve complex math problems before she could log onto the machine (she loved this &ndash; I swear.  I called it the &ldquo;logger logger&rdquo;), I had auto-responders on IRC before there was a bot to do that and I eventually made a program that enabled me to write plain text (in English) and it would spit out my Spanish homework.</p>

<p>However, at the age of 18 &ndash; I convinced myself that coding wasn&rsquo;t a &ldquo;creative endeavor&rdquo;.  That it wasn&rsquo;t going to be where I left my mark on the world and that I should try something else.  I went to college, studied business and eventually hung up my programming hat for a while.</p>

<p>After a series of mediocre jobs, none that really intrigued me or asked me to solve any real-world issues, I came back to programming with a new sense of purpose.  I didn&rsquo;t know what that purpose was, I just knew that I was underutilized in my job and therefore wanted to try my hand at developing again.  I&rsquo;m more experienced in life and in business, but more importantly I have a firm understanding of certain areas in the world that have gaps &ndash; some that I think I can help overcome.</p>

<p>In the end, my goal here is a bit selfish, that is to make a better me &ndash; one that involves a life and a career that makes me a forever student.  I‚Äôm the last person to claim to know everything and I think this future career in development fits that mindset, perfectly.</p>
]]></content>
  </entry>
  
</feed>
